import tensorflow as tf
from tensorflow import keras
from skimage.io import imread
import numpy as np
import matplotlib.pyplot as plt

class_names=['daisy','rose']

train_images = []
train_labels = []
test_images = []
test_labels = []

for i in range(726):
    images=imread('C:\\mini_project2\\datasets2\\train\\daisy\\daisy ('+str(i)+').jpg')
    train_images.append(images)
    train_labels.append(0)
for i in range(726):
    images=imread('C:\\mini_project2\\datasets2\\train\\rose\\rose ('+str(i)+').jpg')
    train_images.append(images)
    train_labels.append(1)
for i in range(43):
    images=imread('C:\\mini_project2\\datasets2\\test\\daisy\\daisy ('+str(i)+').jpg')
    test_images.append(images)
    test_labels.append(0)
for i in range(57):
    images=imread('C:\\mini_project2\\datasets2\\test\\rose\\rose ('+str(i)+').jpg')
    test_images.append(images)
    test_labels.append(1)
    
temp1 = np.array([train_images, train_labels])
temp2 = np.array([test_images, test_labels])
temp1 = temp1.transpose()
temp2 = temp2.transpose()
np.random.shuffle(temp1)
np.random.shuffle(temp2)
train_images = list(temp1[:,0])
train_labels = list(temp1[:,1])
test_images = list(temp2[:,0])
test_labels = list(temp2[:,1])

train_images = np.array(train_images)
train_labels = np.array(train_labels)
test_images = np.array(test_images)
test_labels = np.array(test_labels)


train_labels=keras.utils.to_categorical(train_labels)
test_labels=keras.utils.to_categorical(test_labels)

train_images = train_images/255.0
test_images = test_images/255.0

num_classes = 2
model = keras.models.Sequential()
model.add(keras.layers.Conv2D(32, (3, 3), input_shape=(32, 32, 3), padding='same', activation='relu', kernel_constraint=keras.constraints.MaxNorm(3)))
model.add(keras.layers.Dropout(0.2))
model.add(keras.layers.Conv2D(32, (3, 3), activation='relu', padding='same', kernel_constraint=keras.constraints.MaxNorm(3)))
model.add(keras.layers.MaxPooling2D(pool_size=(2, 2)))
model.add(keras.layers.Flatten())
model.add(keras.layers.Dense(512, activation='relu', kernel_constraint=keras.constraints.MaxNorm(3)))
model.add(keras.layers.Dropout(0.5))
model.add(keras.layers.Dense(num_classes, activation='softmax'))
# Compile model
epochs = 30
lrate = 0.01
decay = lrate/epochs
sgd = keras.optimizers.SGD(lr=lrate, momentum=0.9, decay=decay, nesterov=False)
model.compile(loss='categorical_crossentropy', optimizer=sgd, metrics=['accuracy'])
model.fit(train_images, train_labels, epochs=30)

test_loss, test_acc = model.evaluate(test_images, test_labels)
print('Test accuracy:', test_acc)
predictions = model.predict(test_images)
for i in range(10):
    print('prediction: ' + class_names[np.argmax(predictions[i])])
    print('label: '+ test_labels[i])
